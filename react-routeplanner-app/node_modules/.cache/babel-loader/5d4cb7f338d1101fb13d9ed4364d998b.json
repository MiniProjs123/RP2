{"ast":null,"code":"const hardCodedJWTDummy = \"hardcoded_mockJWT\";\nconst tokenKey = \"token\";\nexport async function login(username, password) {\n  // async\n  // hard coded here!!!     \n  if (username === \"admin\" && password === \"pass\") {\n    const jwt = hardCodedJWTDummy; // plug in impl here eventually.....\n\n    localStorage.setItem(tokenKey, jwt); // fabricate this...!\n\n    if (jwt === hardCodedJWTDummy) {\n      // dummy....\n      return {\n        data: {\n          username: \"admin\",\n          password: \"pass\"\n        }\n      };\n    }\n  }\n\n  console.log(\"resetting form as login has failed...\");\n  username = \"\";\n  password = \"\";\n  return null;\n}\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\nexport function getJwt() {\n  return localStorage.getItem(tokenKey);\n}\nexport function getCurentUser() {\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n\n    if (jwt === hardCodedJWTDummy) {\n      // // dummy....\n      return {\n        data: {\n          username: \"admin\",\n          password: \"password\"\n        }\n      };\n    }\n  } catch (e) {\n    // return null means there is no current user\n    return null;\n  }\n}\nexport async function loginWithJwt(jwt) {\n  localStorage.setItem(tokenKey, jwt);\n}\nexport default {\n  login,\n  logout,\n  getCurentUser,\n  loginWithJwt,\n  getJwt\n};","map":{"version":3,"sources":["/Users/paulbickell/Documents/Oct2020Workspace/RP2-master/react-routeplanner-app/src/services/authService.js"],"names":["hardCodedJWTDummy","tokenKey","login","username","password","jwt","localStorage","setItem","data","console","log","logout","removeItem","getJwt","getItem","getCurentUser","e","loginWithJwt"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,mBAA1B;AAEA,MAAMC,QAAQ,GAAG,OAAjB;AAEA,OAAO,eAAeC,KAAf,CAAqBC,QAArB,EAA+BC,QAA/B,EAAyC;AAAE;AAC9C;AACA,MAAID,QAAQ,KAAK,OAAb,IAAwBC,QAAQ,KAAK,MAAzC,EAAiD;AAC7C,UAAMC,GAAG,GAAGL,iBAAZ,CAD6C,CACd;;AAC/BM,IAAAA,YAAY,CAACC,OAAb,CAAqBN,QAArB,EAA+BI,GAA/B,EAF6C,CAG7C;;AACA,QAAIA,GAAG,KAAKL,iBAAZ,EAA+B;AAAE;AAC7B,aAAO;AAACQ,QAAAA,IAAI,EAAE;AAAEL,UAAAA,QAAQ,EAAE,OAAZ;AAAqBC,UAAAA,QAAQ,EAAE;AAA/B;AAAP,OAAP;AACH;AACJ;;AAEDK,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAP,EAAAA,QAAQ,GAAG,EAAX;AACAC,EAAAA,QAAQ,GAAG,EAAX;AAEA,SAAO,IAAP;AACH;AAED,OAAO,SAASO,MAAT,GAAkB;AACvBL,EAAAA,YAAY,CAACM,UAAb,CAAwBX,QAAxB;AACD;AAED,OAAO,SAASY,MAAT,GAAkB;AACvB,SAAOP,YAAY,CAACQ,OAAb,CAAqBb,QAArB,CAAP;AACD;AAED,OAAO,SAASc,aAAT,GAAyB;AAC5B,MAAI;AACA,UAAMV,GAAG,GAAGC,YAAY,CAACQ,OAAb,CAAqBb,QAArB,CAAZ;;AACA,QAAII,GAAG,KAAKL,iBAAZ,EAA+B;AAAG;AAC9B,aAAO;AAACQ,QAAAA,IAAI,EAAE;AAAEL,UAAAA,QAAQ,EAAE,OAAZ;AAAqBC,UAAAA,QAAQ,EAAE;AAA/B;AAAP,OAAP;AACH;AACJ,GALD,CAKE,OAAOY,CAAP,EAAU;AACR;AACA,WAAO,IAAP;AACH;AACJ;AAED,OAAO,eAAeC,YAAf,CAA4BZ,GAA5B,EAAiC;AACpCC,EAAAA,YAAY,CAACC,OAAb,CAAqBN,QAArB,EAA+BI,GAA/B;AACH;AAED,eAAe;AACbH,EAAAA,KADa;AAEbS,EAAAA,MAFa;AAGbI,EAAAA,aAHa;AAIbE,EAAAA,YAJa;AAKbJ,EAAAA;AALa,CAAf","sourcesContent":["const hardCodedJWTDummy = \"hardcoded_mockJWT\";\n\nconst tokenKey = \"token\";\n\nexport async function login(username, password) { // async\n    // hard coded here!!!     \n    if (username === \"admin\" && password === \"pass\") {\n        const jwt = hardCodedJWTDummy; // plug in impl here eventually.....\n        localStorage.setItem(tokenKey, jwt); \n        // fabricate this...!\n        if (jwt === hardCodedJWTDummy) { // dummy....\n            return {data: { username: \"admin\", password: \"pass\"}};\n        }\n    }\n\n    console.log(\"resetting form as login has failed...\");\n    username = \"\";\n    password = \"\";\n\n    return null;\n}\n\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\n\nexport function getJwt() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport function getCurentUser() {\n    try {\n        const jwt = localStorage.getItem(tokenKey);\n        if (jwt === hardCodedJWTDummy) {  // // dummy....\n            return {data: { username: \"admin\", password: \"password\"}};\n        }\n    } catch (e) {\n        // return null means there is no current user\n        return null;\n    }\n}\n\nexport async function loginWithJwt(jwt) {\n    localStorage.setItem(tokenKey, jwt);  \n}\n\nexport default {\n  login,\n  logout,\n  getCurentUser,\n  loginWithJwt,\n  getJwt\n};\n"]},"metadata":{},"sourceType":"module"}