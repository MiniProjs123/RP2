{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/paulbickell/Documents/Oct2020Workspace/RP2-master/react-routeplanner-app/src/common/form.jsx\";\nimport React, { Component } from \"react\";\nimport Joi from \"joi\";\nimport Input from \"./input\";\nimport Select from \"./select\";\nimport TextArea from \"./textArea\";\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      errors: {}\n    };\n\n    this.validateWithJoi = () => {\n      // params:  binding object, validation definition\n      const option = {\n        abortEarly: false\n      }; // ie do not terminate validation as soon as Joi finds an error\n\n      const result = Joi.validate(this.state.data, this.schema, option);\n      if (!result.error) return null; // no Joi error\n\n      const errors = {};\n\n      for (let item of result.error.details) {\n        errors[item.path] = item.message; // creates an errors map / array of different paths (ie. property names)\n      }\n\n      return errors;\n    };\n\n    this.validateProperty = ({\n      name,\n      value\n    }) => {\n      //use compouted properties in ES6\n      const obj = {\n        [name]: value\n      }; // name of input property supplied dynamically\n\n      const schema = {\n        [name]: this.schema[name]\n      };\n      const {\n        error\n      } = Joi.validate(obj, schema); // note we want to abort early, so as not to display all errors at once\n      // if there is an error on this input component, return the first error details string\n\n      return error ? error.details[0].message : null;\n    };\n\n    this.handleChange = ({\n      currentTarget: input\n    }) => {\n      const errors = { ...this.state.errors\n      };\n      const errorMsg = this.validateProperty(input);\n      if (errorMsg) errors[input.name] = errorMsg;else delete errors[input.name];\n      const data = { ...this.state.data\n      };\n      data[input.name] = input.value;\n      this.setState({\n        data,\n        errors\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const errors = this.validateWithJoi();\n      this.setState({\n        errors: errors || {}\n      });\n      if (errors) return;\n      this.doSubmit();\n    };\n\n    this.renderButton = (label, classname = \"btn btn-primary\") => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.validateWithJoi(),\n        className: classname,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderInput = (propName, label, autoFocus, type = \"text\", width = \"200px\") => {\n      const {\n        data,\n        errors\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(Input, {\n        type: type,\n        name: propName,\n        label: label,\n        value: data[propName],\n        onChange: this.handleChange,\n        error: errors[propName],\n        autoFocus: autoFocus,\n        width: width\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this);\n    };\n\n    this.renderReadOnlyTextArea = (propName, label, autoFocus, width, rows, value) => {\n      const {\n        data,\n        errors\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(TextArea, {\n        name: propName,\n        label: label,\n        onChange: this.handleChange,\n        autoFocus: autoFocus,\n        width: width,\n        rows: rows,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderSelect = (propName, label, autoFocus, options, width) => {\n      const {\n        data,\n        errors\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(Select, {\n        name: propName,\n        width: width,\n        label: label,\n        value: data[propName],\n        autoFocus: autoFocus,\n        options: options,\n        error: errors[propName],\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/Users/paulbickell/Documents/Oct2020Workspace/RP2-master/react-routeplanner-app/src/common/form.jsx"],"names":["React","Component","Joi","Input","Select","TextArea","Form","state","data","errors","validateWithJoi","option","abortEarly","result","validate","schema","error","item","details","path","message","validateProperty","name","value","obj","handleChange","currentTarget","input","errorMsg","setState","handleSubmit","e","preventDefault","doSubmit","renderButton","label","classname","renderInput","propName","autoFocus","type","width","renderReadOnlyTextArea","rows","renderSelect","options"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Joi from \"joi\";\nimport Input from \"./input\";\nimport Select from \"./select\";\nimport TextArea from \"./textArea\";\n\nclass Form extends Component {\n  state = {\n    data: {},\n    errors: {}\n  };\n\n  // JOI:  https://www.npmjs.com/package/joi\n  validateWithJoi = () => {\n\n    // params:  binding object, validation definition\n    const option = { abortEarly: false }; // ie do not terminate validation as soon as Joi finds an error\n    const result = Joi.validate(this.state.data, this.schema, option);\n\n    if (!result.error) return null; // no Joi error\n\n    const errors = {};\n    for (let item of result.error.details) {\n      errors[item.path] = item.message; // creates an errors map / array of different paths (ie. property names)\n    }\n\n    return errors;\n  };\n\n  validateProperty = ({ name, value }) => {\n    //use compouted properties in ES6\n    const obj = { [name]: value }; // name of input property supplied dynamically\n    const schema = { [name]: this.schema[name] };\n    const { error } = Joi.validate(obj, schema); // note we want to abort early, so as not to display all errors at once\n    // if there is an error on this input component, return the first error details string\n    return error ? error.details[0].message : null;\n  };\n\n  handleChange = ({ currentTarget: input }) => {\n    const errors = { ...this.state.errors };\n    const errorMsg = this.validateProperty(input);\n\n    if (errorMsg) errors[input.name] = errorMsg;\n    else delete errors[input.name];\n\n    const data = { ...this.state.data };\n    data[input.name] = input.value;\n    this.setState({ data, errors });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const errors = this.validateWithJoi();\n    this.setState({ errors: errors || {} });\n\n    if (errors) return;\n\n    this.doSubmit();\n  };\n\n  renderButton = (label, classname = \"btn btn-primary\") => {\n    return (\n      <button disabled={this.validateWithJoi()} className={classname}>\n        {label}\n      </button>\n    );\n  };\n\n\nrenderInput = (propName, label, autoFocus, type = \"text\", width = \"200px\") => {\n  const { data, errors } = this.state;\n  return (\n    <Input\n      type={type}\n      name={propName}\n      label={label}\n      value={data[propName]} \n      onChange={this.handleChange}\n      error={errors[propName]} \n      autoFocus={autoFocus}\n      width={width}\n    />\n  );\n};\n\n  renderReadOnlyTextArea = (propName, label, autoFocus, width, rows, value) => {\n    const { data, errors } = this.state;\n    return (\n      <TextArea\n        name={propName}\n        label={label}\n        onChange={this.handleChange}\n        autoFocus={autoFocus}\n        width={width}\n        rows={rows}\n        value={value}\n      />\n    );\n  };\n\n  renderSelect = (propName, label, autoFocus, options, width) => {\n    const { data, errors } = this.state;\n    return (\n      <Select\n        name={propName}\n        width={width}\n        label={label}\n        value={data[propName]} \n        autoFocus={autoFocus}\n        options={options}\n        error={errors[propName]} \n        onChange={this.handleChange} \n      />\n    );\n  };\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}