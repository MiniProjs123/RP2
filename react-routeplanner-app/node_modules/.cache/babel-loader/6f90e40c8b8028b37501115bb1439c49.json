{"ast":null,"code":"import axios from \"axios\";\nimport logger from \"./logService\"; //import auth from \"./authService\";\n\nimport { toast } from \"react-toastify\"; // if user is not logged in, x-auth-token will be undefined\n// and header will not be set\n// note this can be tested by setting vidly-api-node/default.json to true...\n// axios.defaults.headers.common[\"x-auth-token\"] = auth.getJwt();\n// MOVED TO setJwt() below - to avoid bidriectional dependencies (bettween http and auth services)\n// simply by adding this interceptor we can intercept the request\n// included here for portability\n// NOTE: no errors, obviously nothing to implement\n\naxios.interceptors.response.use(null, error => {\n  const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedError) {\n    // INTERCEPTING AN UNEXPECTED ERROR, so log and give a pleasant generic message\n    // examples: no connectivity, server down, database down.....etc\n    logger.log(error); // WAS Alert(\"An unexpected error occurrred.\");\n    // use as an object\n    // toast.error(\"An unexpected error occurrred.\");\n    // also:  toast.success / toast.info etc\n    // also, it can be used as a function\n    // rather more colourful to use:\n\n    toast(\"An unexpected error occurrred.\");\n  } // reject the promise from the service because it contains an unexpected error\n\n\n  return Promise.reject(error);\n});\nexport function setJwt(jwt) {\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\n} // wraps which implementation of httpService to use\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  setJwt\n};","map":{"version":3,"sources":["/Users/paulbickell/Documents/Oct2020Workspace/RP2-master/react-routeplanner-app/src/services/httpService.js"],"names":["axios","logger","toast","interceptors","response","use","error","expectedError","status","log","Promise","reject","setJwt","jwt","defaults","headers","common","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAF,KAAK,CAACG,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,IAAhC,EAAsCC,KAAK,IAAI;AAC7C,QAAMC,aAAa,GACjBD,KAAK,CAACF,QAAN,IACAE,KAAK,CAACF,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAF,KAAK,CAACF,QAAN,CAAeI,MAAf,GAAwB,GAH1B;;AAKA,MAAI,CAACD,aAAL,EAAoB;AAClB;AACA;AACAN,IAAAA,MAAM,CAACQ,GAAP,CAAWH,KAAX,EAHkB,CAKlB;AAEA;AACA;AACA;AAEA;AACA;;AACAJ,IAAAA,KAAK,CAAC,gCAAD,CAAL;AACD,GApB4C,CAsB7C;;;AACA,SAAOQ,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,CAxBD;AA0BA,OAAO,SAASM,MAAT,CAAgBC,GAAhB,EAAqB;AAC1Bb,EAAAA,KAAK,CAACc,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IAAgDH,GAAhD;AACD,C,CAED;;AACA,eAAe;AACbI,EAAAA,GAAG,EAAEjB,KAAK,CAACiB,GADE;AAEbC,EAAAA,IAAI,EAAElB,KAAK,CAACkB,IAFC;AAGbC,EAAAA,GAAG,EAAEnB,KAAK,CAACmB,GAHE;AAIbC,EAAAA,MAAM,EAAEpB,KAAK,CAACoB,MAJD;AAKbR,EAAAA;AALa,CAAf","sourcesContent":["import axios from \"axios\";\nimport logger from \"./logService\";\n//import auth from \"./authService\";\nimport { toast } from \"react-toastify\";\n\n// if user is not logged in, x-auth-token will be undefined\n// and header will not be set\n// note this can be tested by setting vidly-api-node/default.json to true...\n// axios.defaults.headers.common[\"x-auth-token\"] = auth.getJwt();\n// MOVED TO setJwt() below - to avoid bidriectional dependencies (bettween http and auth services)\n\n// simply by adding this interceptor we can intercept the request\n// included here for portability\n// NOTE: no errors, obviously nothing to implement\naxios.interceptors.response.use(null, error => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    // INTERCEPTING AN UNEXPECTED ERROR, so log and give a pleasant generic message\n    // examples: no connectivity, server down, database down.....etc\n    logger.log(error);\n\n    // WAS Alert(\"An unexpected error occurrred.\");\n\n    // use as an object\n    // toast.error(\"An unexpected error occurrred.\");\n    // also:  toast.success / toast.info etc\n\n    // also, it can be used as a function\n    // rather more colourful to use:\n    toast(\"An unexpected error occurrred.\");\n  }\n\n  // reject the promise from the service because it contains an unexpected error\n  return Promise.reject(error);\n});\n\nexport function setJwt(jwt) {\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\n}\n\n// wraps which implementation of httpService to use\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  setJwt\n};\n"]},"metadata":{},"sourceType":"module"}