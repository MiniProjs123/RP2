{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/paulbickell/Documents/Oct2020Workspace/RP2-master/react-routeplanner-app/src/components/protectedRoute.jsx\";\nimport React, { Component } from \"react\";\nimport auth from \"../services/authService\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({\n  path,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // destructure from props\n  // rename componet to get the capital C\n  // routes can use component OR render function, not both\n  // the route might need other properties, so pass the rest through...\n  // so, no need to specify:   path={path}\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    exact: true,\n    render: props => {\n      console.log(props); // note the history, location and match components (from Router)\n      // if (!auth.getCurentUser())\n      //   // see login.jsx form component\n      //   return (\n      //     <Redirect\n      //       to={{\n      //         pathname: \"/login\",\n      //         state: { from: props.location }\n      //       }}\n      //     />\n      //   );\n\n      return Component ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 28\n      }, this) : render(props);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ProtectedRoute;\nexport default ProtectedRoute; // WAS ORIG:\n// if (!auth.getCurentUser()) return <Redirect to=\"/login\" />;\n// overwriting this performs the redirection, but also keeps in mind the location where the user last was,\n// so that when logging in on request, the user is redirected back to page they were trying to complete\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["/Users/paulbickell/Documents/Oct2020Workspace/RP2-master/react-routeplanner-app/src/components/protectedRoute.jsx"],"names":["React","Component","auth","Route","Redirect","ProtectedRoute","path","component","render","rest","props","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAS,EAAEN,SAAnB;AAA8BO,EAAAA,MAA9B;AAAsC,KAAGC;AAAzC,CAAD,KAAqD;AAC1E;AACA;AACA;AACA;AACA;AACA,sBACE,QAAC,KAAD,OACMA,IADN;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,MAAM,EAAEC,KAAK,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADe,CACK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAOT,SAAS,gBAAG,QAAC,SAAD,OAAeS;AAAf;AAAA;AAAA;AAAA;AAAA,cAAH,GAA8BF,MAAM,CAACE,KAAD,CAApD;AACD;AAhBH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA1BD;;KAAML,c;AA4BN,eAAeA,cAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport auth from \"../services/authService\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ path, component: Component, render, ...rest }) => {\n  // destructure from props\n  // rename componet to get the capital C\n  // routes can use component OR render function, not both\n  // the route might need other properties, so pass the rest through...\n  // so, no need to specify:   path={path}\n  return (\n    <Route\n      {...rest}\n      exact\n      render={props => {\n        console.log(props); // note the history, location and match components (from Router)\n        // if (!auth.getCurentUser())\n        //   // see login.jsx form component\n        //   return (\n        //     <Redirect\n        //       to={{\n        //         pathname: \"/login\",\n        //         state: { from: props.location }\n        //       }}\n        //     />\n        //   );\n        return Component ? <Component {...props} /> : render(props);\n      }}\n    />\n  );\n};\n\nexport default ProtectedRoute;\n\n// WAS ORIG:\n// if (!auth.getCurentUser()) return <Redirect to=\"/login\" />;\n// overwriting this performs the redirection, but also keeps in mind the location where the user last was,\n// so that when logging in on request, the user is redirected back to page they were trying to complete\n"]},"metadata":{},"sourceType":"module"}